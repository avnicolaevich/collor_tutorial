/*
 * jQuery MultiSelect UI Widget 1.13
 * Copyright (c) 2012 Eric Hynds
 *
 * http://www.erichynds.com/jquery/jquery-ui-multiselect-widget/
 *
 * Depends:
 *   - jQuery 1.4.2+
 *   - jQuery UI 1.8 widget factory
 *
 * Optional:
 *   - jQuery UI effects
 *   - jQuery UI position utility
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 *
 */
(function(t, e) {
        var i = 0,
            s = t(document);
        t.widget("ech.multiselect", {
            options: {
                header: !0,
                height: 175,
                minWidth: 225,
                classes: "",
                checkAllText: "Check all",
                uncheckAllText: "Uncheck all",
                noneSelectedText: "Select options",
                showCheckAll: !0,
                showUncheckAll: !0,
                selectedText: "# selected",
                selectedList: 0,
                closeIcon: "ui-icon-circle-close",
                show: null,
                hide: null,
                autoOpen: !1,
                multiple: !0,
                position: {},
                appendTo: null,
                menuWidth: null,
                selectedListSeparator: ", ",
                disableInputsOnToggle: !0,
                groupColumns: !1
            },
            _getAppendEl: function() {
                var e = this.options.appendTo;
                return e && (e = e.jquery || e.nodeType ? t(e) : this.document.find(e).eq(0)), e && e[0] || (e = this.element.closest(".ui-front, dialog")), e.length || (e = this.document[0].body), e
            },
            _create: function() {
                var e = this.element,
                    s = this.options;
                this.speed = t.fx.speeds._default, this._isOpen = !1, this.inputIdCounter = 0, this._namespaceID = this.eventNamespace || "multiselect" + i, this.multiselectID = i++;
                var n = (this.button = t('<button type="button"><span class="ui-icon ui-icon-triangle-1-s"></span></button>')).addClass("ui-multiselect ui-widget ui-state-default ui-corner-all").addClass(s.classes).attr({
                    title: e.attr("title"),
                    tabIndex: e.attr("tabIndex"),
                    id: e.attr("id") ? e.attr("id") + "_ms" : null
                }).prop("aria-haspopup", !0).insertAfter(e);
                this.buttonlabel = t("<span />").html(s.noneSelectedText).appendTo(n), this.menu = t("<div />").addClass("ui-multiselect-menu ui-widget ui-widget-content ui-corner-all").addClass(s.classes).appendTo(this._getAppendEl()), this.header = t("<div />").addClass("ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix").appendTo(this.menu), this.headerLinkContainer = t("<ul />").addClass("ui-helper-reset").html(function() {
                    if (!0 === s.header) {
                        var t = "";
                        return s.showCheckAll && (t = '<li><a class="ui-multiselect-all" href="#"><span class="ui-icon ui-icon-check"></span><span>' + s.checkAllText + "</span></a></li>"), s.showUncheckAll && (t += '<li><a class="ui-multiselect-none" href="#"><span class="ui-icon ui-icon-closethick"></span><span>' + s.uncheckAllText + "</span></a></li>"), t
                    }
                    return "string" == typeof s.header ? "<li>" + s.header + "</li>" : ""
                }).append('<li class="ui-multiselect-close"><a href="#" class="ui-multiselect-close"><span class="ui-icon ' + s.closeIcon + '"></span></a></li>').appendTo(this.header);
                (this.checkboxContainer = t("<ul />")).addClass("ui-multiselect-checkboxes ui-helper-reset").appendTo(this.menu);
                this._bindEvents(), this.refresh(!0), s.multiple || this.menu.addClass("ui-multiselect-single"), e.hide()
            },
            _init: function() {
                !1 === this.options.header && this.header.hide(), this.options.multiple ? this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").show() : this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide(), this.options.autoOpen && this.open(), this.element.is(":disabled") && this.disable()
            },
            _makeOption: function(e) {
                var i = e.title ? e.title : null,
                    s = e.value,
                    n = this.element.attr("id") || this.multiselectID,
                    o = "ui-multiselect-" + this.multiselectID + "-" + (e.id || n + "-option-" + this.inputIdCounter++),
                    a = e.disabled,
                    r = e.selected,
                    l = ["ui-corner-all"],
                    h = [],
                    c = this.options;
                a && (h.push("ui-multiselect-disabled"), l.push("ui-state-disabled")), e.className && h.push(e.className), r && !c.multiple && l.push("ui-state-active");
                var u = t("<li/>").addClass(h.join(" ")),
                    d = t("<label/>").attr({
                        for: o,
                        title: i
                    }).addClass(l.join(" ")).appendTo(u),
                    p = t("<input/>").attr({
                        name: "multiselect_" + n,
                        type: c.multiple ? "checkbox" : "radio",
                        value: s,
                        title: i,
                        id: o,
                        checked: r ? "checked" : null,
                        "aria-selected": r ? "true" : null,
                        disabled: a ? "disabled" : null,
                        "aria-disabled": a ? "true" : null
                    }).data(t(e).data()).appendTo(d),
                    f = t("<span/>").text(t(e).text());
                return p.data("image-src") && f.prepend(t("<img/>").attr({
                    src: p.data("image-src")
                })), f.appendTo(d), u
            },
            _buildOptionList: function(e, i) {
                var s = this;
                e.children().each(function() {
                    var e = t(this);
                    if ("OPTGROUP" === this.tagName) {
                        var n = t("<ul/>").addClass("ui-multiselect-optgroup " + this.className).appendTo(i);
                        s.options.groupColumns && n.addClass("ui-multiselect-columns"), t("<a/>").text(this.getAttribute("label")).appendTo(n), s._buildOptionList(e, n)
                    } else {
                        s._makeOption(this).appendTo(i)
                    }
                })
            },
            refresh: function(e) {
                var i = this.element,
                    s = (this.options, this.menu),
                    n = (this.checkboxContainer, t("<ul/>").addClass("ui-multiselect-checkboxes ui-helper-reset"));
                this.inputIdCounter = 0, this.options.header && (this.options.multiple ? this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").show() : this.headerLinkContainer.find(".ui-multiselect-all, .ui-multiselect-none").hide()), this._buildOptionList(i, n), this.menu.find(".ui-multiselect-checkboxes").remove(), this.menu.append(n), this.labels = s.find("label"), this.inputs = this.labels.children("input"), this._setButtonWidth(), this.update(!0), e || this._trigger("refresh")
            },
            update: function(e) {
                var i, s = this.options,
                    n = this.inputs,
                    o = n.filter(":checked"),
                    a = o.length;
                i = 0 === a ? s.noneSelectedText : t.isFunction(s.selectedText) ? s.selectedText.call(this, a, n.length, o.get()) : /\d/.test(s.selectedList) && s.selectedList > 0 && a <= s.selectedList ? o.map(function() {
                    return t(this).next().text()
                }).get().join(s.selectedListSeparator) : s.selectedText.replace("#", a).replace("#", n.length), this._setButtonValue(i), e && (this.button[0].defaultValue = i)
            },
            _setButtonValue: function(t) {
                this.buttonlabel.text(t)
            },
            _bindButtonEvents: function() {
                function e() {
                    return i[i._isOpen ? "close" : "open"](), !1
                }
                var i = this,
                    s = this.button;
                s.find("span").bind("click.multiselect", e), s.bind({
                    click: e,
                    keypress: function(t) {
                        switch (t.which) {
                            case 27:
                            case 38:
                            case 37:
                                i.close();
                                break;
                            case 39:
                            case 40:
                                i.open()
                        }
                    },
                    mouseenter: function() {
                        s.hasClass("ui-state-disabled") || t(this).addClass("ui-state-hover")
                    },
                    mouseleave: function() {
                        t(this).removeClass("ui-state-hover")
                    },
                    focus: function() {
                        s.hasClass("ui-state-disabled") || t(this).addClass("ui-state-focus")
                    },
                    blur: function() {
                        t(this).removeClass("ui-state-focus")
                    }
                })
            },
            _bindMenuEvents: function() {
                var e = this;
                this.menu.delegate(".ui-multiselect-optgroup a", "click.multiselect", function(i) {
                    i.preventDefault();
                    var s = t(this),
                        n = s.parent().find("input:visible:not(:disabled)"),
                        o = n.get(),
                        a = s.text();
                    !1 !== e._trigger("beforeoptgrouptoggle", i, {
                        inputs: o,
                        label: a
                    }) && (e._toggleChecked(n.filter(":checked").length !== n.length, n), e._trigger("optgrouptoggle", i, {
                        inputs: o,
                        label: a,
                        checked: o.length ? o[0].checked : null
                    }))
                }).delegate("label", "mouseenter.multiselect", function() {
                    t(this).hasClass("ui-state-disabled") || (e.labels.removeClass("ui-state-hover"), t(this).addClass("ui-state-hover").find("input").focus())
                }).delegate("label", "keydown.multiselect", function(i) {
                    if (82 !== i.which && !(i.which > 111 && i.which < 124)) switch (i.preventDefault(), i.which) {
                        case 9:
                            i.shiftKey ? (e.menu.find(".ui-state-hover").removeClass("ui-state-hover"), e.header.find("li").last().find("a").focus()) : e.close();
                            break;
                        case 27:
                            e.close();
                            break;
                        case 38:
                        case 40:
                        case 37:
                        case 39:
                            e._traverse(i.which, this);
                            break;
                        case 13:
                        case 32:
                            t(this).find("input")[0].click();
                            break;
                        case 65:
                            i.altKey && e.checkAll();
                            break;
                        case 85:
                            i.altKey && e.uncheckAll()
                    }
                }).delegate('input[type="checkbox"], input[type="radio"]', "click.multiselect", function(i) {
                    var s = t(this),
                        n = this.value,
                        o = s.parent().find("span").text(),
                        a = this.checked,
                        r = e.element.find("option");
                    if (this.disabled || !1 === e._trigger("click", i, {
                            value: n,
                            text: o,
                            checked: a
                        })) return void i.preventDefault();
                    s.focus(), s.prop("aria-selected", a), r.each(function() {
                        this.value === n ? this.selected = a : e.options.multiple || (this.selected = !1)
                    }), e.options.multiple || (e.labels.removeClass("ui-state-active"), s.closest("label").toggleClass("ui-state-active", a), e.close()), e.element.trigger("change"), setTimeout(t.proxy(e.update, e), 10)
                })
            },
            _bindHeaderEvents: function() {
                var e = this;
                this.header.delegate("a", "click.multiselect", function(i) {
                    var s = t(this);
                    s.hasClass("ui-multiselect-close") ? e.close() : s.hasClass("ui-multiselect-all") ? e.checkAll() : s.hasClass("ui-multiselect-none") && e.uncheckAll(), i.preventDefault()
                }).delegate("a", "keydown.multiselect", function(i) {
                    switch (i.which) {
                        case 27:
                            e.close();
                            break;
                        case 9:
                            var s = t(i.target);
                            (!i.shiftKey || s.parent().prev().length || e.header.find(".ui-multiselect-filter").length) && (s.parent().next().length || e.labels.length || i.shiftKey) || (e.close(), i.preventDefault())
                    }
                })
            },
            _bindEvents: function() {
                var e = this;
                this._bindButtonEvents(), this._bindMenuEvents(), this._bindHeaderEvents(), s.bind("mousedown." + e._namespaceID, function(i) {
                    var s = i.target;
                    !e._isOpen || s === e.button[0] || s === e.menu[0] || t.contains(e.menu[0], s) || t.contains(e.button[0], s) || e.close()
                }), t(this.element[0].form).bind("reset." + this._namespaceID, function() {
                    setTimeout(t.proxy(e.refresh, e), 10)
                })
            },
            _getMinWidth: function() {
                var t = this.options.minWidth,
                    e = 0;
                switch (typeof t) {
                    case "number":
                        e = t;
                        break;
                    case "string":
                        var i = t[t.length - 1];
                        e = t.match(/\d+/), e = "%" === i ? this.element.parent().outerWidth() * (e / 100) : parseInt(t, 10)
                }
                return e
            },
            _setButtonWidth: function() {
                var t = this.element.outerWidth(),
                    e = this._getMinWidth();
                t < e && (t = e), this.button.outerWidth(t)
            },
            _setMenuWidth: function() {
                var t = this.menu,
                    e = this.button.outerWidth() <= 0 ? this._getMinWidth() : this.button.outerWidth();
                t.outerWidth(this.options.menuWidth || e)
            },
            _setMenuHeight: function() {
                var e = this.menu.children(".ui-multiselect-header:visible").outerHeight(!0),
                    i = 0;
                this.menu.find(".ui-multiselect-checkboxes li, .ui-multiselect-checkboxes a").each(function(e, s) {
                    i += t(s).outerHeight(!0)
                }), i > this.options.height ? (this.menu.children(".ui-multiselect-checkboxes").css("overflow", "auto"), i = this.options.height) : this.menu.children(".ui-multiselect-checkboxes").css("overflow", "hidden"), this.menu.children(".ui-multiselect-checkboxes").height(i), this.menu.height(i + e)
            },
            _resizeMenu: function() {
                this._setMenuWidth(), this._setMenuHeight()
            },
            _traverse: function(e, i) {
                var s = t(i),
                    n = 38 === e || 37 === e,
                    o = s.parent()[n ? "prevAll" : "nextAll"]("li:not(.ui-multiselect-disabled, .ui-multiselect-optgroup):visible").first();
                if (o.length || (o = s.parents(".ui-multiselect-optgroup")[n ? "prev" : "next"]()), o.length) o.find("label:visible")[n ? "last" : "first"]().trigger("mouseover");
                else {
                    var a = this.menu.find("ul").last();
                    this.menu.find("label:visible")[n ? "last" : "first"]().trigger("mouseover"), a.scrollTop(n ? a.height() : 0)
                }
            },
            _toggleState: function(t, e) {
                return function() {
                    this.disabled || (this[t] = e), e ? this.setAttribute("aria-selected", !0) : this.removeAttribute("aria-selected")
                }
            },
            _toggleChecked: function(t, e) {
                var i = e && e.length ? e : this.inputs,
                    s = this;
                i.each(this._toggleState("checked", t)), i.eq(0).focus(), this.update();
                var n = {};
                i.each(function() {
                    n[this.value] = !0
                }), this.element.find("option").each(function() {
                    !this.disabled && n[this.value] && s._toggleState("selected", t).call(this)
                }), i.length && this.element.trigger("change")
            },
            _toggleDisabled: function(t) {
                if (this.button.prop({
                        disabled: t,
                        "aria-disabled": t
                    })[t ? "addClass" : "removeClass"]("ui-state-disabled"), this.options.disableInputsOnToggle) {
                    var e = this.menu.find(".ui-multiselect-checkboxes").get(0),
                        i = [],
                        s = "ech-multiselect-disabled",
                        n = 0;
                    if (t)
                        for (i = e.querySelectorAll("input:enabled"), n = 0; n < i.length; n++) i[n].setAttribute(s, !0), i[n].setAttribute("disabled", "disabled"), i[n].setAttribute("aria-disabled", "disabled"), i[n].parentNode.className = i[n].parentNode.className + " ui-state-disabled";
                    else
                        for (i = e.querySelectorAll("input:disabled"), n = 0; n < i.length; n++) i[n].hasAttribute(s) && (i[n].removeAttribute(s), i[n].removeAttribute("disabled"), i[n].removeAttribute("aria-disabled"), i[n].parentNode.className = i[n].parentNode.className.replace(" ui-state-disabled", ""))
                }
                this.element.prop({
                    disabled: t,
                    "aria-disabled": t
                })
            },
            open: function(e) {
                var i = this,
                    s = this.button,
                    n = this.menu,
                    o = this.speed,
                    a = this.options,
                    r = [];
                if (!1 !== this._trigger("beforeopen") && !s.hasClass("ui-state-disabled") && !this._isOpen) {
                    var l = n.find(".ui-multiselect-checkboxes"),
                        h = a.show;
                    t.isArray(a.show) && (h = a.show[0], o = a.show[1] || i.speed), h && (r = [h, o]), l.scrollTop(0), t.fn.show.apply(n, r), this._resizeMenu(), this.position();
                    var c = this.header.find(".ui-multiselect-filter");
                    c.length ? c.first().find("input").trigger("focus") : this.labels.length ? this.labels.filter(":not(.ui-state-disabled)").eq(0).trigger("mouseover").trigger("mouseenter").find("input").trigger("focus") : this.header.find("a").first().trigger("focus"), s.addClass("ui-state-active"), this._isOpen = !0, this._trigger("open")
                }
            },
            close: function() {
                if (!1 !== this._trigger("beforeclose")) {
                    var e = this.options,
                        i = e.hide,
                        s = this.speed,
                        n = [];
                    t.isArray(e.hide) && (i = e.hide[0], s = e.hide[1] || this.speed), i && (n = [i, s]), t.fn.hide.apply(this.menu, n), this.button.removeClass("ui-state-active").trigger("blur").trigger("mouseleave"), this._isOpen = !1, this._trigger("close"), this.button.trigger("focus")
                }
            },
            enable: function() {
                this._toggleDisabled(!1)
            },
            disable: function() {
                this._toggleDisabled(!0)
            },
            checkAll: function(t) {
                this._toggleChecked(!0), this._trigger("checkAll")
            },
            uncheckAll: function() {
                this._toggleChecked(!1), this._trigger("uncheckAll")
            },
            getChecked: function() {
                return this.menu.find("input").filter(":checked")
            },
            getUnchecked: function() {
                return this.menu.find("input").not(":checked")
            },
            destroy: function() {
                return t.Widget.prototype.destroy.call(this), s.unbind(this._namespaceID), t(this.element[0].form).unbind(this._namespaceID), this.button.remove(), this.menu.remove(), this.element.show(), this
            },
            isOpen: function() {
                return this._isOpen
            },
            widget: function() {
                return this.menu
            },
            getButton: function() {
                return this.button
            },
            getMenu: function() {
                return this.menu
            },
            getLabels: function() {
                return this.labels
            },
            addOption: function(e, i, s) {
                var n = t("<option/>").attr(e).text(i),
                    o = n.get(0);
                s ? (this.element.children("OPTGROUP").filter(function() {
                    return t(this).prop("label") === s
                }).append(n), this.menu.find(".ui-multiselect-optgroup").filter(function() {
                    return t(this).find("a").text() === s
                }).append(this._makeOption(o))) : (this.element.append(n), this.menu.find(".ui-multiselect-checkboxes").append(this._makeOption(o))), this.labels = this.menu.find("label"), this.inputs = this.labels.children("input")
            },
            removeOption: function(t) {
                t && (this.element.find("option[value=" + t + "]").remove(), this.labels.find("input[value=" + t + "]").parents("li").remove(), this.labels = this.menu.find("label"), this.inputs = this.labels.children("input"))
            },
            position: function() {
                var e = {
                    my: "top",
                    at: "bottom",
                    of: this.button
                };
                t.isEmptyObject(this.options.position) || (e.my = this.options.position.my || e.my, e.at = this.options.position.at || e.at, e.of = this.options.position.of || e.of), t.ui && t.ui.position ? this.menu.position(e) : (e = this.button.position(), e.top += this.button.outerHeight(!1), this.menu.offset(e))
            },
            _setOption: function(e, i) {
                var s = this.menu;
                switch (e) {
                    case "header":
                        "boolean" == typeof i ? this.header[i ? "show" : "hide"]() : "string" == typeof i && (this.headerLinkContainer.children("li:not(:last-child)").remove(), this.headerLinkContainer.prepend("<li>" + i + "</li>"));
                        break;
                    case "checkAllText":
                        s.find("a.ui-multiselect-all span").eq(-1).text(i);
                        break;
                    case "uncheckAllText":
                        s.find("a.ui-multiselect-none span").eq(-1).text(i);
                        break;
                    case "height":
                        this.options[e] = i, this._setMenuHeight();
                        break;
                    case "minWidth":
                    case "menuWidth":
                        this.options[e] = i, this._setButtonWidth(), this._setMenuWidth();
                        break;
                    case "selectedText":
                    case "selectedList":
                    case "noneSelectedText":
                        this.options[e] = i, this.update();
                        break;
                    case "classes":
                        s.add(this.button).removeClass(this.options.classes).addClass(i);
                        break;
                    case "multiple":
                        s.toggleClass("ui-multiselect-single", !i), this.options.multiple = i, this.element[0].multiple = i, this.uncheckAll(), this.refresh();
                        break;
                    case "position":
                        this.position();
                        break;
                    case "selectedListSeparator":
                        this.options[e] = i, this.update(!0)
                }
                t.Widget.prototype._setOption.apply(this, arguments)
            }
        })
    })(jQuery);
